{"version":3,"sources":["../node_modules/sentiment/languages sync /^/.//.*//index$","components/modules/Chat.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","sentiment","Sentiment","Chat","props","handleCloseClick","clearMessages","setState","messages","scrollToBottom","messagesEnd","scrollIntoView","behavior","handleClick","mainInput","value","setTimeout","sendMessage","getTokens","getResponse","getResponseB","sendResponse","_","state","message","push","FriendData","findSentiment","messagegetterkey","tokens","responseJSON","responseToUser","tokensforresponse","console","log","readJSON","fetch","then","resp","json","data","happy","youSad","meSad","welcome","welcomemodal","nextMessage","responseMessage","messageForm","happychat","setHappy","bind","setmeSad","setyouSad","updateMessage","localStorage","getItem","JSON","parse","this","prevProps","prevState","length","stringify","setItem","event","initialMessage","target","result","analyze","tokenized","toLowerCase","replace","trim","split","FriendName","ChatReady","Modal","animation","show","scrollable","dialogClassName","backdrop","keyboard","onHide","Header","Body","Button","variant","className","onClick","key","index","Card","bg","source","text","style","float","clear","ref","el","Footer","InputGroup","FormControl","autoFocus","aria-describedby","onChange","onFocus","onKeyPress","Append","React","Component","ReactTimeout","App","sendName","friend","introVisible","chatVisible","updateFriend","placeholder","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.564db9c2.chunk.js","sourcesContent":["var map = {\n\t\"./en/index\": 21\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 41;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl'; \nimport Card from 'react-bootstrap/Card';\nimport Sentiment from 'sentiment';\nimport './Chat.css';\nimport ReactTimeout from 'react-timeout';\nimport responseJSON from './responses.json';\nimport responseArray from './responseArray.json';\n\n\nconst sentiment = new Sentiment()\n\n\n\nclass Chat extends React.Component {\n    \n    constructor(props){\n        super(props);\n        this.state = {\n        happy : false,\n        youSad : \"hide\",\n        meSad : \"hide\",\n        welcome : \"show\",\n        welcomemodal: \"modal-height\",\n        message : \"\",\n        nextMessage: \"human-bubble hide\",\n        tokens: [],\n        responseMessage: {\"name\": \"sad\", \"source\": \"computer\", \"bg\":\"primary\", \"text\": \"Well,\"},\n        messageForm: \"mb-3\",\n        responseToUser: \"It's makes me sad when I can't uderstand you. I'm just a little robot. Can you be more clear?\",\n        happychat: false,\n        messages: []\n        }\n        this.setHappy = this.setHappy.bind(this);\n        this.setmeSad = this.setmeSad.bind(this);\n        this.setyouSad = this.setyouSad.bind(this);\n        this.updateMessage = this.updateMessage.bind(this);\n        this.findSentiment = this.findSentiment.bind(this);\n        this.getTokens = this.getTokens.bind(this);\n\n    }\n\n    componentDidMount() {\n        const json = localStorage.getItem(\"messages\");\n        const messages = JSON.parse(json);\n        if (messages) {\n            this.setState(() => ({ messages }));\n            }\n        }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.messages.length !== this.state.messages.length) {\n            const json = JSON.stringify(this.state.messages);\n            localStorage.setItem(\"messages\", json);\n            }\n        } \n\n    handleCloseClick = () => {}\n    \n\n    setHappy(event){\n        this.setState({happy : true})\n        this.setState({welcome : \"hide\"})\n        let initialMessage = [{\"name\": \"sad\", \"source\": \"computer\", \"bg\":\"primary\", \"text\": `Well, ${this.props.FriendData}, isn't it so great that you're happy. Why should I be happy for you?`}]\n        this.setState({messages : initialMessage })\n        this.setState({welcomemodal: \"hide\"})\n        this.setState({happychat:true})\n        }\n    \n    setyouSad(event){\n        this.setState({youSad : \"show\"})\n        this.setState({welcome : \"hide\"})\n        this.clearMessages()\n        }\n\n    setmeSad(event){\n        this.setState({meSad : \"show\"})\n        this.setState({welcome : \"hide\"})\n        }\n\n    updateMessage(event){\n        this.setState({message : event.target.value})\n        }   \n        \n    clearMessages = () => {\n        this.setState({messages : []})\n        }\n\n    \n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\n        }\n\n    handleClick = (e) => {\n        this.mainInput.value = \"\";\n        setTimeout(this.sendMessage, 100)\n        setTimeout(this.getTokens, 200)\n        setTimeout(this.getResponse, 300)\n        setTimeout(this.getResponseB, 300)\n        setTimeout(this.sendResponse, 400)\n    }\n\n    sendMessage = _ => {\n        if (this.state.message === \"\") {                \n        } else {\n        let messages = [...this.state.messages];\n        messages.push({\"name\":this.props.FriendData,\"source\": \"human\", \"bg\":\"light\", \"text\":this.state.message})\n        this.findSentiment()\n        this.setState({ messages });\n        this.scrollToBottom()\n        }\n        };\n\n    findSentiment () {\n        const result = sentiment.analyze(this.state.message)\n        console.log(result)\n        }\n\n\n    getTokens () {\n        if (this.state.message === \"\") {            \n        } else {\n        const tokens = [...this.state.tokens]\n        const tokenized = this.state.message\n                .toLowerCase()\n                .replace(/\\n/g, ' ')\n                .replace(/[.,/#!?$%^&*;:{}=_\"~()@]/g, ' ')\n                .replace(/@/g, ' ')\n                .replace(/\\\\/g, ' ')\n                .replace(/\\s\\s+/g, ' ')\n                .trim()\n                .split(' ');\n        console.log(tokenized)\n        tokens.push(tokenized)\n        this.setState({tokens})\n        }\n    }\n\n    getResponse = _ => {\n        if (this.state.message === \"\") {            \n        } else { \n            let tokenforresponse = [...this.state.tokens[0]]\n            let messagegetterkey = tokenforresponse\n            if (messagegetterkey in responseJSON) {\n            this.setState({responseToUser : responseJSON[messagegetterkey], tokens:[]})\n            }\n        }\n    }\n\n    getResponseB = _ => {\n        if (this.state.message === \"\") {            \n        } else { \n            let tokensforresponse = [...this.state.tokens]\n            console.log(tokensforresponse)\n            }\n        }\n    \n\n    sendResponse = _ => {\n        if (this.state.message === \"\") {            \n        } else { \n            let messages = [...this.state.messages];       \n            messages.push({\"name\": \"sad\", \"source\": \"computer\", \"bg\":\"primary\", \"text\": this.state.responseToUser})\n            this.setState({ messages, message: \"\", tokens: [], responseToUser: \"It's makes me sad when I can't uderstand you. I'm just a little robot. Can you be more clear?\"});\n            this.scrollToBottom()\n    }}\n    \n    readJSON = _ => {\n        fetch('./responses.json')\n        .then(function(resp) {\n            return resp.json()\n        })\n        .then(function(data){\n            console.log(data)\n        })\n    }\n\n    render() \n    {\n        var FriendName = this.props.FriendData;\n        var ChatReady = this.props.ChatReady;\n        \n        return(\n            <div>\n           \n            <Modal animation={false} show={ChatReady} scrollable={true} dialogClassName={this.state.welcomemodal} backdrop=\"static\"\n    keyboard={false}  onHide={this.handleCloseClick}>\n                <Modal.Header>\n                    Welcome to SadChat!\n                </Modal.Header>\n\n                <Modal.Body >\n                    <div>\n                   <p>\n                    Hi {FriendName}!\n                   </p>\n                   <p>\n                   What can I do for you today?\n                   </p>\n                   </div>\n                        \n                    \n                        \n                    \n                    <Button variant=\"outline-secondary\" className=\"Button-width\" onClick={this.setHappy}>Talk About How Happy You Are?</Button>\n                    \n                    \n\n                    </Modal.Body>\n             </Modal>\n             \n             \n            \n                \n                <Modal animation={false} show={this.state.happy} scrollable={true} dialogClassName=\"modal-height\" backdrop=\"static\" keyboard={false} onHide={this.state.handleCloseClick}>\n                    <Modal.Header>\n                    Welcome to SadChat!\n                    </Modal.Header>\n                    <Modal.Body>\n\n                \n                    <div key=\"chatboard\">\n                        {this.state.messages.map((message, index) => (<Card key={index} bg={message.bg} className={message.source}>{message.text}</Card>))}\n                    </div> \n                    <br/>\n                    <br/>\n                    <div style={{ float:\"left\", clear: \"both\" }}\n                        ref={(el) => { this.messagesEnd = el; }}></div>\n                    </Modal.Body>\n                    <Modal.Footer>                          \n                        <div>\n                    <InputGroup className=\"mb-3 lg\" >\n                    <FormControl\n                        autoFocus={true}\n                        ref={(ref) => this.mainInput= ref}\n                        aria-describedby=\"basic-addon2\"\n                        onChange={this.updateMessage}\n                        onFocus={event => {\n                            if (this.state.message !== \"\") {\n                            } else {this.setState({message: \"\"})}\n                        }\n\n                        }\n                        onKeyPress={event => {\n                        if (event.key === 'Enter') {\n                        this.handleClick()}}\n                        }\n                    />\n                    <InputGroup.Append>\n                    <Button variant=\"outline-secondary\" onClick={this.handleClick}>Send Chat</Button>\n                    </InputGroup.Append>\n                    </InputGroup>\n                    </div>\n                    </Modal.Footer>  \n             </Modal>\n             </div>\n    )\n       \n    }\n}\n\nexport default ReactTimeout(Chat);","import React from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl'; \nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Chat from './components/modules/Chat';\nimport Modal from 'react-bootstrap/Modal';\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      friend : \"\",\n      introVisible : true,\n      chatVisible : false\n    }\n    this.updateFriend = this.updateFriend.bind(this);\n  }\n\n  updateFriend(event){\n    this.setState({friend : event.target.value})\n    }\n    handleCloseClick = () => {}\n  sendName = () => {\n      if (this.state.friend === \"\") {\n      } else {\n      this.setState({ introVisible: false })\n      this.setState({ chatVisible: true});\n    }}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <Modal animation={false} show={this.state.introVisible} backdrop=\"static\" keyboard={false} onHide={this.state.handleCloseClick}>\n              <Modal.Header>\n                Welcome to SadChat!\n              </Modal.Header>\n              <Modal.Body>\n                <InputGroup className=\"mb-3\">\n                  <FormControl\n                    autoFocus={true}\n                    placeholder=\"Who's there?\"\n                    aria-label=\"Who's there?\"\n                    aria-describedby=\"basic-addon2\"\n                    onChange={this.updateFriend}\n                    onKeyPress={event => {\n                      if (event.key === 'Enter') {\n                        this.sendName()}}\n                    }\n                  />\n                <InputGroup.Append>\n                  <Button variant=\"outline-secondary\" onClick={this.sendName}>Send Chat</Button>\n                </InputGroup.Append>\n                </InputGroup>\n\n              </Modal.Body>\n            </Modal>\n\n            \n        \n        <Chat FriendData={this.state.friend} ChatReady={this.state.chatVisible}/>\n        </div>\n        </header>\n        \n  \n        \n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}